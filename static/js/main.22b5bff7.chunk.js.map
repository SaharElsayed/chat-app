{"version":3,"sources":["assets/images/user.svg","components/Avatar/index.js","components/Header/index.js","components/Message/index.js","components/Button/index.js","components/Input/index.js","components/Footer/index.js","containers/Conversation/index.js","App.js","reportWebVitals.js","index.js"],"names":["Avatar","avatar","size","extraClass","className","src","alt","defaultProps","user","Header","name","Message","sender","body","date","isLastInterlocutorMsg","Button","theme","text","isDisabled","disabled","Input","type","placeholder","value","onChangeHandler","onChange","e","Footer","useState","msg","setMsg","target","length","Conversation","scrollToBottom","messagesEnd","scrollIntoView","behavior","this","conversationData","interlocutorMsgs","filter","item","lastInterlocutorMsg","map","id","renderConversation","Converstation","ref","el","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22b5bff7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.c2f3f511.svg\";","import React from \"react\";\r\nimport user from \"./../../assets/images/user.svg\";\r\nimport \"./styles.scss\";\r\n\r\n/*\r\n  Avatar component for general used\r\n  @props: {avatar, size: 'small' | 'large', extraClass}\r\n*/\r\nconst Avatar = ({ avatar, size, extraClass }) => {\r\n  return (\r\n    <div\r\n      className={`avatar-wrapper-${size} d-flex flex-center justify-center ${extraClass}`}\r\n    >\r\n      <img\r\n        data-testid=\"avatar-img\"\r\n        className={`user-vatar-${size}`}\r\n        src={avatar}\r\n        alt=\"interlocutor icon\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nAvatar.defaultProps = {\r\n  avatar: user,\r\n  size: \"small\",\r\n  extraClass: \"\",\r\n};\r\n\r\nexport default Avatar;\r\n","import React from \"react\";\r\nimport Avatar from \"../Avatar\";\r\nimport \"./styles.scss\";\r\n\r\n/*\r\n  Header component for general used\r\n  @props: {name}\r\n*/\r\nconst Header = ({ name }) => {\r\n  return (\r\n    <div className=\"conversataion-header d-flex flex-center\">\r\n      <Avatar size=\"large\" extraClass=\"mr-10\" />\r\n      <h3 data-testid=\"user-name\" className=\"user-name mb-0\">\r\n        {name}\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  name: \"Marc\",\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Avatar from \"../Avatar\";\r\nimport \"./styles.scss\";\r\n\r\n/*\r\n  Message component for general used\r\n  @props: {sender: 'user' | 'interlocutor', body, date, isLastInterlocutorMsg: true | false}\r\n*/\r\nconst Message = ({ sender, body, date, isLastInterlocutorMsg }) => (\r\n  <div\r\n    className={`d-flex  ${sender === \"user\" ? \"justify-end\" : \"flex-center\"}`}\r\n  >\r\n    {sender === \"interlocutor\" && isLastInterlocutorMsg && (\r\n      <Avatar size=\"small\" extraClass=\"mr-10\" />\r\n    )}\r\n    <div\r\n      className={`msg ${sender}-msg ${\r\n        sender === \"interlocutor\" && !isLastInterlocutorMsg ? \"ml-50\" : \"\"\r\n      }`}\r\n    >\r\n      <p data-testid=\"msg-text\">{body}</p>\r\n      <small data-testid=\"msg-date\">{date}</small>\r\n    </div>\r\n  </div>\r\n);\r\nexport default Message;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\n/*\r\n  Button component for general used\r\n  @props: { theme, text, isDisabled}\r\n*/\r\nconst Button = ({ theme, text, isDisabled }) => (\r\n  <button disabled={isDisabled} className={`btn ${theme}`}>\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport \"./styles.scss\";\r\n\r\n/*\r\n  Input component for general used\r\n  @props: {type, placeholder, value, onChangeHandler}\r\n*/\r\n\r\nconst Input = ({type, placeholder, value, onChangeHandler}) => {\r\n  return ( \r\n    <input \r\n      className='input'\r\n      value={value}\r\n      onChange={(e) => onChangeHandler(e)}\r\n      type={type}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n}\r\n\r\nInput.defaultProps = {\r\n  type: 'text',\r\n  placeholder: 'Type a message...'\r\n};\r\n \r\nexport default Input;","import React, { useState } from \"react\";\r\nimport Button from \"../Button\";\r\nimport Input from \"../Input\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => {\r\n  const [msg, setMsg] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"conversation-footer d-flex flex-center\">\r\n      <Input value={msg} onChangeHandler={handleChange} />\r\n      <Button\r\n        isDisabled={msg.length === 0 ? \"disabled\" : false}\r\n        theme=\"primary\"\r\n        text=\"Send\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./../../components/Header\";\r\nimport Message from \"../../components/Message\";\r\nimport Footer from \"./../../components/Footer\";\r\nimport Converstation from \"./../../fakeData/Conversation.json\";\r\nimport \"./styles.scss\";\r\nclass Conversation extends Component {\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  renderConversation(conversationData) {\r\n    const interlocutorMsgs = conversationData.filter(\r\n        (item) => item.sender === \"interlocutor\"\r\n      ),\r\n      lastInterlocutorMsg = interlocutorMsgs[interlocutorMsgs.length - 1];\r\n\r\n    return conversationData.map(({ id, text, sender, date }) => (\r\n      <Message\r\n        key={`msg-${id}`}\r\n        isLastInterlocutorMsg={id === lastInterlocutorMsg[\"id\"]}\r\n        sender={sender}\r\n        body={text}\r\n        date={date}\r\n      />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <div className=\"msgs-container p-20\">\r\n          {this.renderConversation(Converstation)}\r\n          <div\r\n            ref={(el) => {\r\n              this.messagesEnd = el;\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Conversation;\r\n","import Conversation from \"./containers/Conversation\";\r\nimport \"./scss/base.scss\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Conversation />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}